static 메소드 안에서는 인스턴스 멤버 사용불가능
이유는 static 멤버와 인스턴스 멤버의 실행 순서가 다르기 때문
static 멤버는 프로그램 시작과 끝까지 계속 메모리에 존재하지만,
인스턴스멤버는 객체를 생성해야만 존재하기 때문에



	static int add (int a , long b){
		System.out.println("첫 번재 add");
		return 0;
	}
	static int add (long a , int b){
		System.out.println("두 번재 add");
		return 1;
	}
	
	
	add(1,2);
	
	
	
위와 같은 코드는 애매모호한 결과를 도출하므로 정확한 매개변수를 넘겨 주지 않는다면
오류를 도출한다.	
	
	
생성자 ( Constructor)	
생성자는 반드시 클래스에 하나이상 존재해야 한다.
생성자는 클래스 이름과 동일해야 한다.
사용자가 만들어주지 않는다면 컴파일러가 비어있는 기본 생성자를 만들어서 컴파일 한다.
생성자는 리턴타입이 없으나 void 를 적어주지 않아야 한다.
생성자는 여러개를 만들 수 있으며 매개변수의 갯수와 타입으로 구분한다.
그러므로, 생성자 또한 오버로딩(Overloading)이 가능하다


메소드 이름이 클래스와 다르면 생성자로 인식하지 않고 메소드로 인식함
메소드 이름이 클래스 이름과 같더라도 return 타입이 정의 되어 있으면 생성자가 아니라 인스턴스메소드임
메소드는 클래스 이름과 같아도 무관함



this 참조변수는 현재 객체의 주소값이 저장되어 있음.



초기화 블록 
static {}  static {}은 한번 실행
{} 인스턴스 블럭은 객체 생성때마다