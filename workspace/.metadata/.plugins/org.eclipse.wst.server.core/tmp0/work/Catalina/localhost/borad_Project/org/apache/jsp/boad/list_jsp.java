/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2016-03-28 12:16:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.boad;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.sun.xml.internal.txw2.Document;
import board.BoardDBBean;
import board.BoardDataBean;
import java.util.*;
import java.text.SimpleDateFormat;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/boad/color.jsp", Long.valueOf(1459151914141L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.sun.xml.internal.txw2.Document");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("board.BoardDataBean");
    _jspx_imports_classes.add("board.BoardDBBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

String bodyback_c="#e0ffff";
String back_c="#8fbc8f";
String title_c="#5f9ea0";
String value_c="#b0e0e6";
String bar="#778899";

      out.write('\r');
      out.write('\n');

	int pageSize=10;
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");

      out.write('\r');
      out.write('\n');

	String pageNum = request.getParameter("pageNum");
	if(pageNum == null){
		pageNum = "1";
	}
	int currentPage = Integer.parseInt(pageNum);
	//System.out.println(currentPage);
	int startRow = (currentPage * 10) -9;
	int endRow = currentPage * pageSize;
	int count = 0;
	int number =0;
	String select = null;
	String search = null;
	try{
		select = request.getParameter("select");
		search = request.getParameter("search");
	}catch(Exception e){
	}
	ArrayList <BoardDataBean> articleList = null;
	BoardDBBean dbPro = BoardDBBean.getInstance();
	try{
	if(select == null || select.equals("")){
		count = dbPro.getArticleCount();
	}else{
		count=dbPro.getsearchArticleCount(select,search);
	}
	}catch(Exception e){
		e.printStackTrace();
	}
	if(count>0){
 		if(select == null || select.equals("")){
			articleList = dbPro.getArticles(startRow, endRow);
		}
		else{
			articleList = dbPro.getArticles(select, search);
		} 
		
		/* if(select != null){
			
			articleList = dbPro.getArticles(select, search);
		}
		else{
			articleList = dbPro.getArticles(startRow, endRow);
		} */
	}
	number = count - (currentPage - 1) * pageSize;
	//11-(2-1) * 3 = 8;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title> 게시판 </title>\r\n");
      out.write("<link href = \"style.css\" rel=\"stylesheet\" type = \"text/css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body bgcolor = \"");
      out.print(bodyback_c);
      out.write("\">\r\n");
      out.write("<center><b>글목록(전체 글: ");
      out.print(count );
      out.write(")</b>\r\n");
      out.write("\r\n");
      out.write("<table width=\"700\">\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<td align=\"right\" bgcolor=\"");
      out.print(value_c );
      out.write("\">\r\n");
      out.write("\t\t<a href = \"writeForm.jsp\">글쓰기</a>\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");

	if(count ==0){

      out.write("\r\n");
      out.write("<table width = \"700\" border = \"1\" cellpadding=\"0\" cellspacing=\"0\">\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<td align=\"center\">\r\n");
      out.write("\t\t\t게시판에 저장 된 글이 없습니다.\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("</table>\r\n");
 } else { 
      out.write("\r\n");
      out.write("<table border = \"1\" width = \"700\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">\r\n");
      out.write("\t<tr height=\"30\" bgcolor=\"");
      out.print(value_c);
      out.write("\">\r\n");
      out.write("\t\t<td align=\"center\" width = \"50\" > 번  호</td>\r\n");
      out.write("\t\t<td align=\"center\" width=\"250\" > 제     목</td>\r\n");
      out.write("\t\t<td align =\"center\" width = \"100\" > 작성자</td>\r\n");
      out.write("\t\t<td align=\"center\"  width=\"150\" >작성일</td>\r\n");
      out.write("\t\t<td align=\"center\" width = \"50\"> 조   회</td>\r\n");
      out.write("\t\t<td align=\"center\" width=\"100\">IP</td>\r\n");
      out.write("\t</tr>\r\n");

	for(int i =0; i< articleList.size();i++){
		BoardDataBean article= (BoardDataBean)articleList.get(i);

      out.write("\r\n");
      out.write("\t<tr height=\"30\">\r\n");
      out.write("\t\t<td align=\"center\" width = \"50\"> ");
      out.print(number-- );
      out.write("\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t\t<td width=\"250\">\r\n");

	int wid=0;
	if(article.getRe_level()>0){ //답변 글인가?
		wid=5*(article.getRe_level());

      out.write("\r\n");
      out.write("<img src = \"../images/level.gif\" width=\"");
      out.print(wid );
      out.write("\" height=\"16\">\r\n");
      out.write("<img src = \"../images/re.gif\">\r\n");
} else { 
      out.write("\r\n");
      out.write("<img src = \"../images/level.gif\" width = \"");
      out.print(wid );
      out.write("\" height=\"16\">\r\n");
} 
      out.write("\r\n");
      out.write("<a href = \"content.jsp?num=");
      out.print(article.getNum() );
      out.write("&pageNum=");
      out.print(currentPage );
      out.write("\">\r\n");
      out.write("\t");
      out.print(article.getSubject() );
      out.write("</a>\r\n");
      out.write("\t");
if(article.getReadcount()>=20){ 
      out.write("\r\n");
      out.write("<img src=\"../images/hot.gif\" border=\"0\"  height=\"16\">");
}
      out.write(" </td>\r\n");
      out.write("    \t<td align=\"center\"  width=\"100\">\r\n");
      out.write("       \t\t<a href=\"mailto:");
      out.print(article.getEmail());
      out.write('"');
      out.write('>');
      out.print(article.getWriter());
      out.write("</a></td>\r\n");
      out.write("    \t<td align=\"center\"  width=\"150\">");
      out.print( sdf.format(article.getReg_date()));
      out.write("</td>\r\n");
      out.write("    \t<td align=\"center\"  width=\"50\">");
      out.print(article.getReadcount());
      out.write("</td>\r\n");
      out.write("    \t<td align=\"center\" width=\"100\" >");
      out.print(article.getIp());
      out.write("</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("     ");
}
      out.write("\r\n");
      out.write("</table>\r\n");
}
      out.write("\r\n");
      out.write("\r\n");

    if (count > 0) {
    //전체 페이지의 수를 연산
        int pageCount = count / pageSize + ( count % pageSize == 0 ? 0 : 1);

        int startPage = (int)(currentPage/5)*5+1;
		int pageBlock=5;
        int endPage = startPage + pageBlock-1;
        if (endPage > pageCount) endPage = pageCount;
       
        if (startPage > 5) {    
      out.write("\r\n");
      out.write("        <a href=\"list.jsp?pageNum=");
      out.print( startPage - 5 );
      out.write("\">[이전]</a>\r\n");
      }
        for (int i = startPage ; i <= endPage ; i++) {  
      out.write("\r\n");
      out.write("        <a href=\"list.jsp?pageNum=");
      out.print( i );
      out.write('"');
      out.write('>');
      out.write('[');
      out.print( i );
      out.write("]</a>\r\n");

        }
        if (endPage < pageCount) {  
      out.write("\r\n");
      out.write("        <a href=\"list.jsp?pageNum=");
      out.print( startPage + 5 );
      out.write("\">[다음]</a>\r\n");

        }
    }

      out.write("\r\n");
      out.write("\r\n");
      out.write("<form>\r\n");
      out.write("\t<select action=\"list.jsp\" name = \"select\" >\r\n");
      out.write("\t\t<option name = \"select_1\" value=\"subject\">제목</option>\r\n");
      out.write("\t\t<option name = \"select_2\"  value=\"writer\">작성자</option>\r\n");
      out.write("\t</select>\r\n");
      out.write("\t<input type=\"text\" name = \"search\">\r\n");
      out.write("\t<input type=\"submit\" value=\"검색\" onclick=\"\">\r\n");
      out.write("</form>\r\n");
      out.write("</center>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
